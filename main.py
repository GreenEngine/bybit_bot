import PIL.Image
import requests
import commands
from telegram import Update,InputMediaPhoto,InlineKeyboardButton,InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext , Application,ContextTypes,ConversationHandler ,CallbackQueryHandler,MessageHandler,filters,JobQueue
import io
import base
CURRENCY, INTERVAL, NOTIFICATION_TYPE, NOTIFICATION_AMOUNT,START = range(5)
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
TOKEN = '5929509670:AAGNgWIygznKC1_wcTQgCevn64CwfB3HKPA'
# –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–∞
'''

–¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
–¥–æ–±–∞–≤–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–±–∞–∑—ã
–ù–µ–æ–±—Ö–æ–¥–º—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π 
—Ü–µ–Ω—ã 
–ø–ª–æ—â–∞–¥–∫–∏ 
–æ—Ä–¥–µ—Ä–∞ 
–≥—Ä–∞—Ñ–∏–∫ 
'''
# –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ URL-–∞–¥—Ä–µ—Å API Bybit
BASE_URL = 'https://api.bybit.com'
global kit_scaner_on
kit_scaner_on = ('_',)
# –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Updater –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
global last_price
last_price = 0

# –°–æ–∑–¥–∞–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã, –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–ø—Ä–æ—Å–∞, —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
selected_currency = 'BTC'
job = None
job_timer = None
base.check_table_users()
# –°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def send_notification(context) :
    #print('Send Notification')
    global last_price
    chat = job_timer.chat_id
    #print(chat)
    notification_type = base.get_user_setting(chat,'Notification_type')
    notification_type = notification_type [0]
    #print(notification_type)
    notification_amount = base.get_user_setting(chat,'Notification_amount')
    notification_amount =notification_amount[0]
    #print(notification_amount)
    selected_currency = base.get_user_setting(chat,'Currency')
    selected_currency = selected_currency[0]
   # print(selected_currency)
    # –°–æ–∑–¥–∞–π—Ç–µ URL-–∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
    url = f'{BASE_URL}/v2/public/tickers?symbol={selected_currency}USD'
    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ URL-–∞–¥—Ä–µ—Å
    response = requests.get(url)
    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ü–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
    price = response.json()['result'][0]['last_price']
    #print(f'{price}')
    # –í—ã—á–∏—Å–ª–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    price_change = float(price) - float(last_price)
    # –í—ã—á–∏—Å–ª–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    #print(f'price change:{price_change}')
    #await context.bot.send_message(chat_id=chat, text=f'$')
    if last_price == 0:
       last_price = price
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if notification_type == 'change' :
     if abs(float(price_change)) > float(notification_amount):
       print('mess')
       last_price = price
       await context.bot.send_message(chat_id=chat, text=f' {selected_currency}.:{price}$')


async def start(update: Update, context: CallbackContext) -> None:
    if  base.check_user(update.effective_user.id) == False:
        base.set_user_settings(user_id=update.effective_chat.id, apikey='0', kit = '1'
                      ,kit_amount='100', Orderbook = '1',Notification_type='change',Notification_amount='100'
                      ,Notification_fixed='0',Currency='BTC',interval='10',state = 'START')
    else:
     buttons = [
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data='currency')],
        [InlineKeyboardButton("üí∏ –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã", callback_data='price')],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ ", callback_data='interval')],
        [InlineKeyboardButton("üîî –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data='notification_type')],
        [InlineKeyboardButton("üí¨ –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data='notification_amount')],
        [InlineKeyboardButton("üïê –í–∫–ª—é—á–∏—Ç—å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='start_timer')],
        [InlineKeyboardButton("üõë –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='stop_timer')],
        [InlineKeyboardButton("üêã –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∫–∏—Ç–∞—Ö", callback_data='kit_attention')],
        [InlineKeyboardButton("üìà –†–∞–∑–º–µ—Ä –∫–∏—Ç–∞", callback_data='kit_amount')]
                ]
     reply_markup = InlineKeyboardMarkup(buttons)
     await update.message.reply_text('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', reply_markup=reply_markup)

async def on_button(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    chat = update.effective_chat.id
    print(data)
    global job
    global job_timer
    if data == 'currency':
        base.set_user_settings(user_id=chat, state='CURRENCY')
        await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É:')

    elif data == 'price':
        # –°–æ–∑–¥–∞–π—Ç–µ URL-–∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
        url = f'{BASE_URL}/v2/public/tickers?symbol={selected_currency}USD'
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ URL-–∞–¥—Ä–µ—Å
        pr = commands.prices()
        message = f'\n{pr[0]}\n{pr[1]}\n{pr[2]}\n{pr[3]}\n'
        response = requests.get(url)
        # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ü–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
        price = response.json()['result'][0]['last_price']
        global last_price
        last_price = price
        await commands.get_book_btc()
        photo = PIL.Image.open('screenshot.png')
        with io.BytesIO() as output:
            photo.save(output, format='PNG')
            image_data = output.getvalue()
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f'\n Bybit: {selected_currency}: {price}{message}')
        await context.bot.sendPhoto(chat_id=update.effective_chat.id, photo=image_data)

    elif data == 'interval':
        base.set_user_settings(user_id=chat,state='INTERVAL')
        await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:')

    elif data == 'notification_type':
        buttons = [
            [InlineKeyboardButton("change", callback_data='change')],
            [InlineKeyboardButton("fixed", callback_data='fixed')],
            [InlineKeyboardButton("out_of_range", callback_data='out_of_range')]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        base.set_user_settings(user_id=chat, state='NOTIFICATION_TYPE')
        await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', reply_markup=reply_markup)

    elif data == 'notification_amount':
        base.set_user_settings(user_id=chat, state='NOTIFICATION_AMOUNT')
        await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:')
    elif data == 'kit_attention':

        kit_scaner_on = base.get_user_setting(chat, 'kit')

        print('ll')

        if job is not None:
            kit_scaner_on = base.set_user_settings(user_id=chat, kit='1')

            await query.message.reply_text('–§—É–Ω–∫—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö  –≤—ã–∫–ª—é—á–µ–Ω–∞ ')
        if context.job_queue:
            job = context.job_queue.run_repeating(callback=check_kit, interval=5, chat_id=chat)
        else:
            print('fail initalize')
        if kit_scaner_on == '1':
            base.set_user_settings(user_id=chat, kit='0')

        else:
            base.set_user_settings(user_id=chat, kit='1')
            await query.message.reply_text('–§—É–Ω–∫—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö  –≤–∫–ª—é—á–µ–Ω–∞')
    elif data == 'start_timer':

            interval = base.get_user_setting(chat, 'interval')
            interval = int(interval[0])
            #print(interval)
        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if job_timer is not None:
             await  context.bot.send_message(chat_id=chat, text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.')
             return
        # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if context.job_queue:
             print('TImer_job')
             job_timer = context.job_queue.run_repeating(callback=send_notification, interval=interval, chat_id=chat)

            else:
             print('fail initalize')

            await context.bot.send_message(chat_id=chat, text=f'–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ªe–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
    elif data == 'stop_timer':
        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞
        if job_timer is None:
            await context.bot.send_message(chat_id=chat,
                                           text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.')
            return
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        job_timer.schedule_removal()
        job_timer = None

        await context.bot.send_message(chat_id=chat,
                                       text='–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
    elif data =='kit_amount':
        base.set_user_settings(user_id=chat, state='KIT_AMOUNT')
        await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –æ–±—å–µ–º –∫–∏—Ç–∞ –≤ BTC')

async def error_handler(update: Update, context: CallbackContext) -> None:
    if update is not None:
        await update.message.reply_text(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.')

async def on_input(update: Update, context: CallbackContext):
    chat = update.effective_chat.id
    data = base.get_user_setting(chat,'state')
    data = data[0]
    text = update.effective_message.text
    print(data)

    if data =='CURRENCY':
        base.set_user_settings(user_id=chat,Currency=text)
        base.set_user_settings(user_id=chat, state='START')
        await update.message.reply_text(f'–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞:{text}')
    elif data =='INTERVAL':
        base.set_user_settings(user_id=chat, interval=text)
        base.set_user_settings(user_id=chat, state='START')
        await update.message.reply_text(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ :{text} —Å–µ–∫—É–Ω–¥')
    elif data =='NOTIFICATION_TYPE':
        query = update.callback_query
        data = query.data
        print(data)
        base.set_user_settings(user_id=chat, Notification_type=data)
        base.set_user_settings(user_id=chat, state='START')
        await  update.message.reply_text(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {data}')

        pass
    elif data =='NOTIFICATION_AMOUNT':
        try:
            print(f'Razmer{text}')
            base.set_user_settings(user_id=chat, Notification_amount=text)
            base.set_user_settings(user_id=chat, state='START')
            #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
            await  update.message.reply_text(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {text}')
        except ValueError:

            await update.message.reply_text('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
    elif data == 'KIT_AMOUNT':
        base.set_user_settings(user_id=chat,state='START')
        base.set_user_settings(user_id=chat, kit_amount=text)
        await update.message.reply_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—å–µ–º :{text}BTC')

##`sjevM3xG9qgFE6b

async def check_kit(context) :
       chat_id = job.chat_id
       #print(str(chat_id))
       data = commands.kit_check(chat_id)
       if data is not None:
           hash = data[0]
           crypto = data[2]
           ti = data[1]
           ti = ti[0:len(ti)-1]
           usd = data[3]
           mess = f'BTC:{crypto}\nUsd:{usd}\n–í—Ä–µ–º—è:{ti}'
           await context.bot.send_message(chat_id=chat_id, text=f'–ü—Ä–æ–ø–ª—ã–ª –∫–∏—Ç:\n{mess}$')
           #—Ö–æ—á—É —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫
           data = None

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞

    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π



# –°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help(update: Update, context: CallbackContext) -> None:
    help_text =("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã —Å Bybit."

    +"\n –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"

    +"\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
    +"\n/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    +"\n/currency - –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É"
    +"\n/price - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"
    +"\n/interval - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã"
    +"\n/notification_type - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    +"\n/notification_amount - –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    +"\n/start_timer - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    +"\n/stop_timer - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    +"\n/kit_attention - –≤–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∫–∏—Ç–∞—Ö"
    +"\n/kit_amount - —Ä–∞–∑–º–µ—Ä –∫–∏—Ç–∞")



    await update.message.reply_text(help_text)

async def set_kit(update: Update, context: CallbackContext) -> None:

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    kit_amm = context.args[0].upper()
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞
    # –û–±–Ω–æ–≤–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
    base.set_user_settings(user_id=update.effective_chat.id,kit_amount=kit_amm)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä –∫–∏—Ç–∞: {kit_amm}')
# –°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currency
async def set_currency(update: Update, context: CallbackContext) -> None:

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    currency = context.args[0].upper()
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞
    if currency not in ['BTC', 'ETH', 'EOS', 'XRP']:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç—É –≤–∞–ª—é—Ç—É –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.')
        return
    # –û–±–Ω–æ–≤–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
    base.set_user_settings(user_id=update.effective_chat.id,Currency=currency)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f'–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {selected_currency}')

# –°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price

# –°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /interval
async def set_interval(update: Update, context: CallbackContext) -> None:
    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    interval = int(context.args[0])
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –Ω–µ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥
    if interval < 10:
      await  context.bot.send_message(chat_id=update.effective_chat.id, text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥.')
      return
    # –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
    base.set_user_settings(user_id=update.effective_chat.id,interval=interval)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥.')

# –°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notification
async def set_notification_type(update: Update, context: CallbackContext) -> None:
    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    notification = context.args[0]

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ø—É—Å—Ç–∏–º
    if notification not in ['change', 'percentage', 'amount']:
       await  context.bot.send_message(chat_id=update.effective_chat.id, text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')
       return
    # –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    base.set_user_settings(user_id=update.effective_chat.id, Notification_type=notification)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f'–í—ã–±—Ä–∞–Ω —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification}')


# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def set_notification_amount(update, context):
    chat = update.effective_chat.id
    user = update.message.from_user
    text = update.message.text.split()
    if len(text) > 1:
        amount = float(text[1])
        context.user_data['notification_amount'] = amount
        base.set_user_settings(user_id=chat,Notification_amount=amount)
        message = f"{user.first_name}, –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ {amount:.2f}"
    else:
        message = f"{user.first_name}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, /notification_amount 100.00"

    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)



    # –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã



# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    print('one')
    # –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç Updater –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler('start', start))
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    application.add_handler(CommandHandler('help', help))
   # application.add_handler(CommandHandler('currency', set_currency))
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price
    #application.add_handler(CommandHandler('price', get_price))
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /interval
    #application.add_handler(CommandHandler    ('interval', set_interval))
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notification_type
   # application.add_handler(CommandHandler('notification_type', set_notification_type))
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notification_amount
   # application.add_handler(CommandHandler('notification_amount', set_notification_amount))
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_timer
    #application.add_handler(CommandHandler('start_timer', start_timer))
   # application.add_handler(CommandHandler('kit_attention', kit_attention))
    #application.add_handler(CommandHandler('kit_amount', set_kit))
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_timer
    #application.add_handler(CommandHandler('stop_timer', stop_timer))

    application.add_handler(CallbackQueryHandler(on_button))
    application.add_error_handler(error_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_input))
    application.add_handler(CallbackQueryHandler(on_input))

    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
    application.run_polling()

    # –í–æ–π–¥–∏—Ç–µ –≤ —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π


if __name__ == '__main__':
    main()

